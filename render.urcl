bits == 16
minreg 15
minheap 16384
minstack 16

@define @uqrt 0xF000

//camera varibles
.camPos //x, y, and z position of the camera
DW [ 1 3 -30 ] // <-- adjust the position of the camera here
.camRotation //simplified world to camera space matrix
DW [ 1 0 0 ]
DW [ 0 1 0 ]
DW [ 0 0 1 ]
.camLens //pixels per unit at one unit of distance
DW [ 128 ]  // <-- set this low (1 is good) if you're using orthographic. When using perspective, the larger it is relative to screen size, the narrower the FOV. If this == screen size, you get 90 degrees FOV. It's also worth noting that if this * screen size > @smax, you may run into overflow errors.
.camClipNear //near clipping plane
DW [ 1 ]
.camClipFar //far clipping plane
DW [ 255 ]


@define meshAddr .minecraft // <-- replace this label with your mesh's name
@define orthographic 0 // <-- 1 = orthographic, 0 = perspective. Make sure to adjust the .camLens value when using orthographic.

//V V paste mesh data here V V
.minecraft
	//map
		DW [ .minecraftVertices ] //vertices address
		DW [ .minecraftUVs ] //UVs address
		DW [ 0 ] //no normals
		DW [ .minecraftTriVertices ] //triangle vertices address
		DW [ .minecraftTriUVs ] //triangle UVs address
		DW [ 0 ] //no normals
		DW [ .minecraftTexture ] //texture address
	//end map
	//vertices
		DW [ 331 ] //num vertices
	.minecraftVertices //x, y, z
		DW [ 6 -4 -8 ]
		DW [ 8 -2 -8 ]
		DW [ 8 -4 -8 ]
		DW [ 6 -4 -6 ]
		DW [ 6 -2 -8 ]
		DW [ 2 -4 -6 ]
		DW [ 2 -2 -8 ]
		DW [ 2 -4 -8 ]
		DW [ 4 -2 -8 ]
		DW [ 4 -4 -8 ]
		DW [ -2 -4 -6 ]
		DW [ 0 -2 -6 ]
		DW [ 0 -4 -6 ]
		DW [ 0 -2 -8 ]
		DW [ 0 -4 -8 ]
		DW [ -4 -2 -8 ]
		DW [ -4 -4 -8 ]
		DW [ -2 -2 -6 ]
		DW [ -2 -2 -8 ]
		DW [ -2 -4 -8 ]
		DW [ -6 -2 -8 ]
		DW [ -4 -4 -6 ]
		DW [ -8 -2 -8 ]
		DW [ -8 -4 -8 ]
		DW [ -6 -2 -6 ]
		DW [ -6 -4 -8 ]
		DW [ 8 -4 -4 ]
		DW [ 8 -2 -6 ]
		DW [ 8 -4 -6 ]
		DW [ 2 -2 -6 ]
		DW [ 4 -4 -6 ]
		DW [ -2 -4 -4 ]
		DW [ -4 -2 -4 ]
		DW [ -4 -2 -6 ]
		DW [ -4 -4 -4 ]
		DW [ -8 -4 -4 ]
		DW [ -8 -2 -6 ]
		DW [ -8 -4 -6 ]
		DW [ -6 -4 -6 ]
		DW [ 6 -4 -4 ]
		DW [ 8 -2 -2 ]
		DW [ 8 -2 -4 ]
		DW [ 2 -4 -4 ]
		DW [ 4 -4 -4 ]
		DW [ -2 -4 -2 ]
		DW [ 0 2 6 ]
		DW [ 0 -4 -2 ]
		DW [ 0 -2 -4 ]
		DW [ 0 -4 -4 ]
		DW [ -2 -2 -2 ]
		DW [ -2 -2 -4 ]
		DW [ -6 -2 -4 ]
		DW [ -8 -2 -2 ]
		DW [ -8 -4 -2 ]
		DW [ -8 -2 -4 ]
		DW [ -6 -2 -2 ]
		DW [ -6 -4 -2 ]
		DW [ -6 -4 -4 ]
		DW [ 6 -4 -2 ]
		DW [ 8 -2 0 ]
		DW [ 8 -4 0 ]
		DW [ 8 -4 -2 ]
		DW [ 2 2 4 ]
		DW [ 2 -4 -2 ]
		DW [ 8 2 2 ]
		DW [ 4 2 0 ]
		DW [ 4 -4 -2 ]
		DW [ 8 2 0 ]
		DW [ -4 -2 0 ]
		DW [ -4 -2 -2 ]
		DW [ -4 -4 -2 ]
		DW [ -2 -2 0 ]
		DW [ -4 -4 0 ]
		DW [ -8 -2 0 ]
		DW [ -8 -4 0 ]
		DW [ -6 -4 0 ]
		DW [ 6 -4 0 ]
		DW [ 8 -4 2 ]
		DW [ 0 2 8 ]
		DW [ 6 -4 2 ]
		DW [ 6 2 8 ]
		DW [ 4 2 8 ]
		DW [ 2 -4 2 ]
		DW [ 2 2 6 ]
		DW [ 2 -4 0 ]
		DW [ 4 -4 0 ]
		DW [ -2 -4 2 ]
		DW [ 0 -4 2 ]
		DW [ 0 -4 0 ]
		DW [ -2 -4 0 ]
		DW [ -6 -2 0 ]
		DW [ -4 -4 2 ]
		DW [ -8 -4 2 ]
		DW [ -6 -4 2 ]
		DW [ 8 -4 4 ]
		DW [ 8 -2 2 ]
		DW [ 6 -4 4 ]
		DW [ 2 2 8 ]
		DW [ 8 2 8 ]
		DW [ 4 -4 2 ]
		DW [ 8 2 6 ]
		DW [ 0 -4 4 ]
		DW [ 4 2 6 ]
		DW [ -4 -2 4 ]
		DW [ -4 -2 2 ]
		DW [ 8 2 4 ]
		DW [ -6 -2 2 ]
		DW [ -4 -4 4 ]
		DW [ -8 -4 4 ]
		DW [ -8 -2 2 ]
		DW [ -6 -2 4 ]
		DW [ 8 -2 4 ]
		DW [ 6 2 6 ]
		DW [ 6 2 4 ]
		DW [ 4 2 4 ]
		DW [ 2 -4 4 ]
		DW [ 4 2 2 ]
		DW [ 4 -4 4 ]
		DW [ -2 -4 6 ]
		DW [ 6 2 2 ]
		DW [ -4 -2 6 ]
		DW [ 6 2 0 ]
		DW [ 6 2 -2 ]
		DW [ -2 -4 4 ]
		DW [ -8 -2 6 ]
		DW [ -8 -4 6 ]
		DW [ -8 -2 4 ]
		DW [ -6 -4 4 ]
		DW [ 6 -4 6 ]
		DW [ 8 -2 8 ]
		DW [ 8 -4 8 ]
		DW [ 8 -2 6 ]
		DW [ 8 -4 6 ]
		DW [ 4 -4 8 ]
		DW [ 6 -2 8 ]
		DW [ 6 -4 8 ]
		DW [ 2 -2 8 ]
		DW [ 2 -4 8 ]
		DW [ 8 2 -2 ]
		DW [ 2 -4 6 ]
		DW [ 4 -2 8 ]
		DW [ 4 -4 6 ]
		DW [ -2 -4 8 ]
		DW [ 0 -2 8 ]
		DW [ 0 -4 8 ]
		DW [ 0 -4 6 ]
		DW [ -4 -2 8 ]
		DW [ -4 -4 6 ]
		DW [ -2 -2 8 ]
		DW [ -6 -2 6 ]
		DW [ -4 -4 8 ]
		DW [ -8 -2 8 ]
		DW [ -8 -4 8 ]
		DW [ -6 -2 8 ]
		DW [ -6 -4 8 ]
		DW [ -6 -4 6 ]
		DW [ 2 0 -8 ]
		DW [ 4 0 -8 ]
		DW [ 6 0 -8 ]
		DW [ 8 0 -8 ]
		DW [ 2 0 -6 ]
		DW [ 4 0 -6 ]
		DW [ 6 0 -6 ]
		DW [ 8 0 -6 ]
		DW [ 8 0 -4 ]
		DW [ 8 0 -2 ]
		DW [ 6 0 -4 ]
		DW [ 6 0 -2 ]
		DW [ 2 0 -4 ]
		DW [ 4 0 -4 ]
		DW [ 0 0 -4 ]
		DW [ 0 0 -2 ]
		DW [ -2 0 -4 ]
		DW [ -2 0 -2 ]
		DW [ 2 0 -2 ]
		DW [ 4 0 -2 ]
		DW [ 4 0 0 ]
		DW [ -2 0 0 ]
		DW [ -4 0 0 ]
		DW [ 0 0 0 ]
		DW [ 6 0 0 ]
		DW [ 2 0 2 ]
		DW [ 2 0 0 ]
		DW [ 4 0 2 ]
		DW [ 4 0 4 ]
		DW [ 0 0 2 ]
		DW [ 0 0 4 ]
		DW [ -4 0 2 ]
		DW [ -2 0 2 ]
		DW [ -4 0 4 ]
		DW [ -2 0 4 ]
		DW [ -2 0 6 ]
		DW [ -4 0 6 ]
		DW [ 8 0 4 ]
		DW [ 0 0 6 ]
		DW [ 8 0 6 ]
		DW [ 8 0 8 ]
		DW [ 2 0 8 ]
		DW [ 2 0 6 ]
		DW [ 4 0 8 ]
		DW [ -2 0 8 ]
		DW [ -4 0 8 ]
		DW [ 6 0 8 ]
		DW [ 0 0 8 ]
		DW [ -6 0 8 ]
		DW [ -6 0 6 ]
		DW [ 0 0 -6 ]
		DW [ 8 0 0 ]
		DW [ 8 0 2 ]
		DW [ 2 0 4 ]
		DW [ 0 2 2 ]
		DW [ 0 2 4 ]
		DW [ -2 2 2 ]
		DW [ -2 2 4 ]
		DW [ 0 4 2 ]
		DW [ 0 4 4 ]
		DW [ -2 4 4 ]
		DW [ -2 4 2 ]
		DW [ -4 10 4 ]
		DW [ -4 10 2 ]
		DW [ -2 10 6 ]
		DW [ 0 10 6 ]
		DW [ -2 4 0 ]
		DW [ 0 4 0 ]
		DW [ 0 10 0 ]
		DW [ -2 10 0 ]
		DW [ 0 4 6 ]
		DW [ -2 4 6 ]
		DW [ 2 10 4 ]
		DW [ 2 10 2 ]
		DW [ 0 4 8 ]
		DW [ -2 4 8 ]
		DW [ 0 6 8 ]
		DW [ -2 6 8 ]
		DW [ -2 4 -2 ]
		DW [ 0 4 -2 ]
		DW [ -2 6 -2 ]
		DW [ 0 6 -2 ]
		DW [ -4 4 2 ]
		DW [ -4 4 4 ]
		DW [ -2 10 4 ]
		DW [ -2 10 2 ]
		DW [ -4 6 0 ]
		DW [ -4 4 0 ]
		DW [ -4 4 6 ]
		DW [ -4 6 6 ]
		DW [ -4 4 8 ]
		DW [ -4 6 8 ]
		DW [ -4 4 -2 ]
		DW [ -6 4 2 ]
		DW [ -6 4 4 ]
		DW [ -6 6 2 ]
		DW [ -6 6 4 ]
		DW [ -6 6 0 ]
		DW [ -6 4 0 ]
		DW [ -6 4 6 ]
		DW [ -6 6 6 ]
		DW [ 2 4 2 ]
		DW [ 2 4 4 ]
		DW [ 0 10 4 ]
		DW [ 0 10 2 ]
		DW [ 2 4 0 ]
		DW [ 2 6 0 ]
		DW [ 2 6 6 ]
		DW [ 2 4 6 ]
		DW [ 2 6 8 ]
		DW [ 2 4 8 ]
		DW [ 2 4 -2 ]
		DW [ 2 6 -2 ]
		DW [ 4 4 2 ]
		DW [ 4 4 4 ]
		DW [ 4 6 2 ]
		DW [ 4 6 4 ]
		DW [ 4 4 0 ]
		DW [ 4 6 0 ]
		DW [ 4 6 6 ]
		DW [ 4 4 6 ]
		DW [ 0 12 4 ]
		DW [ -2 12 6 ]
		DW [ -2 8 2 ]
		DW [ -2 12 4 ]
		DW [ 2 8 2 ]
		DW [ 2 8 4 ]
		DW [ -2 8 0 ]
		DW [ 0 8 0 ]
		DW [ -4 8 -2 ]
		DW [ -2 8 -2 ]
		DW [ 2 8 8 ]
		DW [ 0 8 8 ]
		DW [ 0 8 6 ]
		DW [ -2 8 6 ]
		DW [ -2 8 8 ]
		DW [ 0 8 -2 ]
		DW [ -4 8 2 ]
		DW [ -4 8 4 ]
		DW [ -4 8 0 ]
		DW [ -4 8 6 ]
		DW [ -4 8 8 ]
		DW [ -6 8 2 ]
		DW [ -6 8 4 ]
		DW [ -6 8 0 ]
		DW [ -6 8 6 ]
		DW [ 2 8 0 ]
		DW [ 4 8 0 ]
		DW [ 2 8 6 ]
		DW [ 2 8 -2 ]
		DW [ 4 8 2 ]
		DW [ 4 8 4 ]
		DW [ 4 8 6 ]
		DW [ -4 10 6 ]
		DW [ 2 10 0 ]
		DW [ 2 10 6 ]
		DW [ 0 12 6 ]
		DW [ 0 12 2 ]
		DW [ 0 12 0 ]
		DW [ -2 12 2 ]
		DW [ -2 12 0 ]
		DW [ 2 12 4 ]
		DW [ 2 12 2 ]
		DW [ -4 12 2 ]
		DW [ -4 12 4 ]
		DW [ -4 6 -2 ]
		DW [ -6 6 -2 ]
		DW [ -6 8 -2 ]
		DW [ -2 8 4 ]
		DW [ 0 8 4 ]
		DW [ 0 8 2 ]
		DW [ 0 6 2 ]
		DW [ 0 6 4 ]
		DW [ -2 6 4 ]
		DW [ -2 6 2 ]
	//end vertices
	//UVs
		DW [ 20 ] //num UVs
	.minecraftUVs //u, v
		DW [ 153 0 ]
		DW [ 102 0 ]
		DW [ 102 251 ]
		DW [ 153 251 ]
		DW [ 101 251 ]
		DW [ 101 0 ]
		DW [ 51 0 ]
		DW [ 51 251 ]
		DW [ 50 251 ]
		DW [ 50 0 ]
		DW [ 0 0 ]
		DW [ 0 251 ]
		DW [ 154 251 ]
		DW [ 204 251 ]
		DW [ 204 0 ]
		DW [ 154 0 ]
		DW [ 205 251 ]
		DW [ 255 251 ]
		DW [ 255 0 ]
		DW [ 205 0 ]
	//end UVs
	//tris
		DW [ 662 ] //num tris
	.minecraftTriVertices //v1, v2, v3
		DW [ 78 97 83 ]
		DW [ 78 83 45 ]
		DW [ 0 4 1 ]
		DW [ 0 1 2 ]
		DW [ 2 1 27 ]
		DW [ 2 27 28 ]
		DW [ 28 3 0 ]
		DW [ 28 0 2 ]
		DW [ 97 81 102 ]
		DW [ 97 102 83 ]
		DW [ 9 8 4 ]
		DW [ 9 4 0 ]
		DW [ 3 30 9 ]
		DW [ 3 9 0 ]
		DW [ 81 80 112 ]
		DW [ 81 112 102 ]
		DW [ 7 6 8 ]
		DW [ 7 8 9 ]
		DW [ 30 5 7 ]
		DW [ 30 7 9 ]
		DW [ 11 29 6 ]
		DW [ 11 6 13 ]
		DW [ 14 13 6 ]
		DW [ 14 6 7 ]
		DW [ 5 12 14 ]
		DW [ 5 14 7 ]
		DW [ 17 11 13 ]
		DW [ 17 13 18 ]
		DW [ 19 18 13 ]
		DW [ 19 13 14 ]
		DW [ 12 10 19 ]
		DW [ 12 19 14 ]
		DW [ 33 17 18 ]
		DW [ 33 18 15 ]
		DW [ 16 15 18 ]
		DW [ 16 18 19 ]
		DW [ 10 21 16 ]
		DW [ 10 16 19 ]
		DW [ 24 33 15 ]
		DW [ 24 15 20 ]
		DW [ 25 20 15 ]
		DW [ 25 15 16 ]
		DW [ 21 38 25 ]
		DW [ 21 25 16 ]
		DW [ 36 24 20 ]
		DW [ 36 20 22 ]
		DW [ 23 22 20 ]
		DW [ 23 20 25 ]
		DW [ 38 37 23 ]
		DW [ 38 23 25 ]
		DW [ 37 36 22 ]
		DW [ 37 22 23 ]
		DW [ 80 98 100 ]
		DW [ 80 100 112 ]
		DW [ 28 27 41 ]
		DW [ 28 41 26 ]
		DW [ 26 39 3 ]
		DW [ 26 3 28 ]
		DW [ 83 102 114 ]
		DW [ 83 114 62 ]
		DW [ 39 43 30 ]
		DW [ 39 30 3 ]
		DW [ 102 112 113 ]
		DW [ 102 113 114 ]
		DW [ 43 42 5 ]
		DW [ 43 5 30 ]
		DW [ 112 100 105 ]
		DW [ 112 105 113 ]
		DW [ 42 48 12 ]
		DW [ 42 12 5 ]
		DW [ 50 47 11 ]
		DW [ 50 11 17 ]
		DW [ 48 31 10 ]
		DW [ 48 10 12 ]
		DW [ 32 50 17 ]
		DW [ 32 17 33 ]
		DW [ 31 34 21 ]
		DW [ 31 21 10 ]
		DW [ 51 32 33 ]
		DW [ 51 33 24 ]
		DW [ 34 57 38 ]
		DW [ 34 38 21 ]
		DW [ 54 51 24 ]
		DW [ 54 24 36 ]
		DW [ 57 35 37 ]
		DW [ 57 37 38 ]
		DW [ 35 54 36 ]
		DW [ 35 36 37 ]
		DW [ 114 113 119 ]
		DW [ 114 119 116 ]
		DW [ 26 41 40 ]
		DW [ 26 40 61 ]
		DW [ 61 58 39 ]
		DW [ 61 39 26 ]
		DW [ 113 105 64 ]
		DW [ 113 64 119 ]
		DW [ 58 66 43 ]
		DW [ 58 43 39 ]
		DW [ 116 119 121 ]
		DW [ 116 121 65 ]
		DW [ 66 63 42 ]
		DW [ 66 42 43 ]
		DW [ 119 64 67 ]
		DW [ 119 67 121 ]
		DW [ 63 46 48 ]
		DW [ 63 48 42 ]
		DW [ 121 67 138 ]
		DW [ 121 138 122 ]
		DW [ 46 44 31 ]
		DW [ 46 31 48 ]
		DW [ 69 49 50 ]
		DW [ 69 50 32 ]
		DW [ 44 70 34 ]
		DW [ 44 34 31 ]
		DW [ 55 69 32 ]
		DW [ 55 32 51 ]
		DW [ 70 56 57 ]
		DW [ 70 57 34 ]
		DW [ 52 55 51 ]
		DW [ 52 51 54 ]
		DW [ 56 53 35 ]
		DW [ 56 35 57 ]
		DW [ 53 52 54 ]
		DW [ 53 54 35 ]
		DW [ 40 41 164 ]
		DW [ 40 164 165 ]
		DW [ 61 40 59 ]
		DW [ 61 59 60 ]
		DW [ 60 76 58 ]
		DW [ 60 58 61 ]
		DW [ 41 27 163 ]
		DW [ 41 163 164 ]
		DW [ 76 85 66 ]
		DW [ 76 66 58 ]
		DW [ 148 143 203 ]
		DW [ 148 203 200 ]
		DW [ 85 84 63 ]
		DW [ 85 63 66 ]
		DW [ 59 40 165 ]
		DW [ 59 165 207 ]
		DW [ 84 88 46 ]
		DW [ 84 46 63 ]
		DW [ 1 4 158 ]
		DW [ 1 158 159 ]
		DW [ 88 89 44 ]
		DW [ 88 44 46 ]
		DW [ 68 71 49 ]
		DW [ 68 49 69 ]
		DW [ 89 72 70 ]
		DW [ 89 70 44 ]
		DW [ 90 68 69 ]
		DW [ 90 69 55 ]
		DW [ 72 75 56 ]
		DW [ 72 56 70 ]
		DW [ 73 90 55 ]
		DW [ 73 55 52 ]
		DW [ 75 74 53 ]
		DW [ 75 53 56 ]
		DW [ 74 73 52 ]
		DW [ 74 52 53 ]
		DW [ 6 29 160 ]
		DW [ 6 160 156 ]
		DW [ 60 59 95 ]
		DW [ 60 95 77 ]
		DW [ 77 79 76 ]
		DW [ 77 76 60 ]
		DW [ 103 120 192 ]
		DW [ 103 192 189 ]
		DW [ 79 99 85 ]
		DW [ 79 85 76 ]
		DW [ 8 6 156 ]
		DW [ 8 156 157 ]
		DW [ 99 82 84 ]
		DW [ 99 84 85 ]
		DW [ 143 136 197 ]
		DW [ 143 197 203 ]
		DW [ 82 87 88 ]
		DW [ 82 88 84 ]
		DW [ 129 131 195 ]
		DW [ 129 195 196 ]
		DW [ 87 86 89 ]
		DW [ 87 89 88 ]
		DW [ 95 59 207 ]
		DW [ 95 207 208 ]
		DW [ 86 91 72 ]
		DW [ 86 72 89 ]
		DW [ 106 104 68 ]
		DW [ 106 68 90 ]
		DW [ 91 93 75 ]
		DW [ 91 75 72 ]
		DW [ 109 106 90 ]
		DW [ 109 90 73 ]
		DW [ 93 92 74 ]
		DW [ 93 74 75 ]
		DW [ 92 109 73 ]
		DW [ 92 73 74 ]
		DW [ 120 149 205 ]
		DW [ 120 205 192 ]
		DW [ 77 95 111 ]
		DW [ 77 111 94 ]
		DW [ 94 96 79 ]
		DW [ 94 79 77 ]
		DW [ 29 11 206 ]
		DW [ 29 206 160 ]
		DW [ 96 117 99 ]
		DW [ 96 99 79 ]
		DW [ 27 1 159 ]
		DW [ 27 159 163 ]
		DW [ 117 115 82 ]
		DW [ 117 82 99 ]
		DW [ 146 148 200 ]
		DW [ 146 200 201 ]
		DW [ 115 101 87 ]
		DW [ 115 87 82 ]
		DW [ 50 49 173 ]
		DW [ 50 173 172 ]
		DW [ 101 123 86 ]
		DW [ 101 86 87 ]
		DW [ 11 47 170 ]
		DW [ 11 170 206 ]
		DW [ 123 107 91 ]
		DW [ 123 91 86 ]
		DW [ 110 103 104 ]
		DW [ 110 104 106 ]
		DW [ 107 127 93 ]
		DW [ 107 93 91 ]
		DW [ 126 110 106 ]
		DW [ 126 106 109 ]
		DW [ 127 108 92 ]
		DW [ 127 92 93 ]
		DW [ 108 126 109 ]
		DW [ 108 109 92 ]
		DW [ 49 71 177 ]
		DW [ 49 177 173 ]
		DW [ 94 111 131 ]
		DW [ 94 131 132 ]
		DW [ 132 128 96 ]
		DW [ 132 96 94 ]
		DW [ 153 146 201 ]
		DW [ 153 201 204 ]
		DW [ 128 141 117 ]
		DW [ 128 117 96 ]
		DW [ 47 50 172 ]
		DW [ 47 172 170 ]
		DW [ 141 139 115 ]
		DW [ 141 115 117 ]
		DW [ 140 134 202 ]
		DW [ 140 202 199 ]
		DW [ 139 145 101 ]
		DW [ 139 101 115 ]
		DW [ 149 153 204 ]
		DW [ 149 204 205 ]
		DW [ 145 118 123 ]
		DW [ 145 123 101 ]
		DW [ 71 68 178 ]
		DW [ 71 178 177 ]
		DW [ 118 147 107 ]
		DW [ 118 107 123 ]
		DW [ 149 120 103 ]
		DW [ 149 103 110 ]
		DW [ 147 155 127 ]
		DW [ 147 127 107 ]
		DW [ 124 149 110 ]
		DW [ 124 110 126 ]
		DW [ 155 125 108 ]
		DW [ 155 108 127 ]
		DW [ 125 124 126 ]
		DW [ 125 126 108 ]
		DW [ 131 111 193 ]
		DW [ 131 193 195 ]
		DW [ 132 131 129 ]
		DW [ 132 129 130 ]
		DW [ 130 135 128 ]
		DW [ 130 128 132 ]
		DW [ 130 129 134 ]
		DW [ 130 134 135 ]
		DW [ 111 95 208 ]
		DW [ 111 208 193 ]
		DW [ 135 133 141 ]
		DW [ 135 141 128 ]
		DW [ 135 134 140 ]
		DW [ 135 140 133 ]
		DW [ 136 140 199 ]
		DW [ 136 199 197 ]
		DW [ 133 137 139 ]
		DW [ 133 139 141 ]
		DW [ 133 140 136 ]
		DW [ 133 136 137 ]
		DW [ 104 103 189 ]
		DW [ 104 189 187 ]
		DW [ 137 144 145 ]
		DW [ 137 145 139 ]
		DW [ 137 136 143 ]
		DW [ 137 143 144 ]
		DW [ 134 129 196 ]
		DW [ 134 196 202 ]
		DW [ 144 142 118 ]
		DW [ 144 118 145 ]
		DW [ 144 143 148 ]
		DW [ 144 148 142 ]
		DW [ 68 104 187 ]
		DW [ 68 187 178 ]
		DW [ 142 150 147 ]
		DW [ 142 147 118 ]
		DW [ 142 148 146 ]
		DW [ 142 146 150 ]
		DW [ 4 8 157 ]
		DW [ 4 157 158 ]
		DW [ 150 154 155 ]
		DW [ 150 155 147 ]
		DW [ 150 146 153 ]
		DW [ 150 153 154 ]
		DW [ 151 153 149 ]
		DW [ 151 149 124 ]
		DW [ 154 152 125 ]
		DW [ 154 125 155 ]
		DW [ 152 151 124 ]
		DW [ 152 124 125 ]
		DW [ 154 153 151 ]
		DW [ 154 151 152 ]
		DW [ 162 163 159 ]
		DW [ 162 159 158 ]
		DW [ 161 162 158 ]
		DW [ 161 158 157 ]
		DW [ 160 161 157 ]
		DW [ 160 157 156 ]
		DW [ 166 164 163 ]
		DW [ 166 163 162 ]
		DW [ 169 166 162 ]
		DW [ 169 162 161 ]
		DW [ 168 169 161 ]
		DW [ 168 161 160 ]
		DW [ 170 168 160 ]
		DW [ 170 160 206 ]
		DW [ 167 165 164 ]
		DW [ 167 164 166 ]
		DW [ 175 167 166 ]
		DW [ 175 166 169 ]
		DW [ 174 175 169 ]
		DW [ 174 169 168 ]
		DW [ 171 174 168 ]
		DW [ 171 168 170 ]
		DW [ 173 171 170 ]
		DW [ 173 170 172 ]
		DW [ 167 180 121 ]
		DW [ 167 121 122 ]
		DW [ 176 180 167 ]
		DW [ 176 167 175 ]
		DW [ 182 176 175 ]
		DW [ 182 175 174 ]
		DW [ 179 182 174 ]
		DW [ 179 174 171 ]
		DW [ 177 179 171 ]
		DW [ 177 171 173 ]
		DW [ 194 203 78 ]
		DW [ 194 78 45 ]
		DW [ 197 199 81 ]
		DW [ 197 81 97 ]
		DW [ 181 183 176 ]
		DW [ 181 176 182 ]
		DW [ 185 181 182 ]
		DW [ 185 182 179 ]
		DW [ 188 185 179 ]
		DW [ 188 179 177 ]
		DW [ 187 188 177 ]
		DW [ 187 177 178 ]
		DW [ 207 165 138 ]
		DW [ 207 138 67 ]
		DW [ 180 176 65 ]
		DW [ 180 65 121 ]
		DW [ 209 184 183 ]
		DW [ 209 183 181 ]
		DW [ 186 209 181 ]
		DW [ 186 181 185 ]
		DW [ 190 186 211 ]
		DW [ 190 211 213 ]
		DW [ 189 190 188 ]
		DW [ 189 188 187 ]
		DW [ 184 209 62 ]
		DW [ 184 62 114 ]
		DW [ 165 167 122 ]
		DW [ 165 122 138 ]
		DW [ 209 198 83 ]
		DW [ 209 83 62 ]
		DW [ 194 198 209 ]
		DW [ 194 209 186 ]
		DW [ 191 194 186 ]
		DW [ 191 186 190 ]
		DW [ 192 191 190 ]
		DW [ 192 190 189 ]
		DW [ 196 195 100 ]
		DW [ 196 100 98 ]
		DW [ 195 193 105 ]
		DW [ 195 105 100 ]
		DW [ 198 194 45 ]
		DW [ 198 45 83 ]
		DW [ 203 197 97 ]
		DW [ 203 97 78 ]
		DW [ 200 203 194 ]
		DW [ 200 194 191 ]
		DW [ 201 200 191 ]
		DW [ 201 191 192 ]
		DW [ 204 201 192 ]
		DW [ 204 192 205 ]
		DW [ 208 207 67 ]
		DW [ 208 67 64 ]
		DW [ 183 184 114 ]
		DW [ 183 114 116 ]
		DW [ 202 196 98 ]
		DW [ 202 98 80 ]
		DW [ 176 183 116 ]
		DW [ 176 116 65 ]
		DW [ 199 202 80 ]
		DW [ 199 80 81 ]
		DW [ 193 208 64 ]
		DW [ 193 64 105 ]
		DW [ 213 211 215 ]
		DW [ 213 215 216 ]
		DW [ 185 188 212 ]
		DW [ 185 212 210 ]
		DW [ 188 190 213 ]
		DW [ 188 213 212 ]
		DW [ 186 185 210 ]
		DW [ 186 210 211 ]
		DW [ 210 212 217 ]
		DW [ 210 217 214 ]
		DW [ 212 213 216 ]
		DW [ 212 216 217 ]
		DW [ 211 210 214 ]
		DW [ 211 214 215 ]
		DW [ 221 259 277 ]
		DW [ 221 277 312 ]
		DW [ 256 245 296 ]
		DW [ 256 296 301 ]
		DW [ 223 235 267 ]
		DW [ 223 267 261 ]
		DW [ 275 272 307 ]
		DW [ 275 307 308 ]
		DW [ 245 247 297 ]
		DW [ 245 297 296 ]
		DW [ 217 216 239 ]
		DW [ 217 239 238 ]
		DW [ 262 268 305 ]
		DW [ 262 305 302 ]
		DW [ 263 275 308 ]
		DW [ 263 308 304 ]
		DW [ 214 217 222 ]
		DW [ 214 222 223 ]
		DW [ 227 231 246 ]
		DW [ 227 246 244 ]
		DW [ 251 252 299 ]
		DW [ 251 299 298 ]
		DW [ 216 215 226 ]
		DW [ 216 226 227 ]
		DW [ 236 234 248 ]
		DW [ 236 248 321 ]
		DW [ 231 230 232 ]
		DW [ 231 232 233 ]
		DW [ 227 226 230 ]
		DW [ 227 230 231 ]
		DW [ 268 237 292 ]
		DW [ 268 292 305 ]
		DW [ 252 256 301 ]
		DW [ 252 301 299 ]
		DW [ 235 234 236 ]
		DW [ 235 236 237 ]
		DW [ 223 222 234 ]
		DW [ 223 234 235 ]
		DW [ 232 230 266 ]
		DW [ 232 266 265 ]
		DW [ 271 274 303 ]
		DW [ 271 303 306 ]
		DW [ 244 245 256 ]
		DW [ 244 256 255 ]
		DW [ 239 244 255 ]
		DW [ 239 255 250 ]
		DW [ 243 242 321 ]
		DW [ 243 321 248 ]
		DW [ 245 244 246 ]
		DW [ 245 246 247 ]
		DW [ 238 239 250 ]
		DW [ 238 250 249 ]
		DW [ 232 265 287 ]
		DW [ 232 287 288 ]
		DW [ 237 236 286 ]
		DW [ 237 286 292 ]
		DW [ 265 263 304 ]
		DW [ 265 304 287 ]
		DW [ 231 233 247 ]
		DW [ 231 247 246 ]
		DW [ 216 227 244 ]
		DW [ 216 244 239 ]
		DW [ 222 217 238 ]
		DW [ 222 238 243 ]
		DW [ 234 222 243 ]
		DW [ 234 243 248 ]
		DW [ 249 250 252 ]
		DW [ 249 252 251 ]
		DW [ 249 251 253 ]
		DW [ 249 253 254 ]
		DW [ 252 250 255 ]
		DW [ 252 255 256 ]
		DW [ 247 233 291 ]
		DW [ 247 291 297 ]
		DW [ 233 232 288 ]
		DW [ 233 288 291 ]
		DW [ 236 321 285 ]
		DW [ 236 285 286 ]
		DW [ 243 238 249 ]
		DW [ 243 249 254 ]
		DW [ 242 243 254 ]
		DW [ 242 254 253 ]
		DW [ 264 258 270 ]
		DW [ 264 270 276 ]
		DW [ 258 257 269 ]
		DW [ 258 269 270 ]
		DW [ 261 262 274 ]
		DW [ 261 274 273 ]
		DW [ 264 263 265 ]
		DW [ 264 265 266 ]
		DW [ 262 261 267 ]
		DW [ 262 267 268 ]
		DW [ 226 215 258 ]
		DW [ 226 258 264 ]
		DW [ 235 237 268 ]
		DW [ 235 268 267 ]
		DW [ 214 223 261 ]
		DW [ 214 261 257 ]
		DW [ 253 251 298 ]
		DW [ 253 298 300 ]
		DW [ 215 214 257 ]
		DW [ 215 257 258 ]
		DW [ 230 226 264 ]
		DW [ 230 264 266 ]
		DW [ 270 269 271 ]
		DW [ 270 271 272 ]
		DW [ 270 272 275 ]
		DW [ 270 275 276 ]
		DW [ 271 269 273 ]
		DW [ 271 273 274 ]
		DW [ 263 264 276 ]
		DW [ 263 276 275 ]
		DW [ 242 253 322 ]
		DW [ 242 322 321 ]
		DW [ 274 262 302 ]
		DW [ 274 302 303 ]
		DW [ 272 271 306 ]
		DW [ 272 306 307 ]
		DW [ 257 261 273 ]
		DW [ 257 273 269 ]
		DW [ 279 283 295 ]
		DW [ 279 295 293 ]
		DW [ 302 284 224 ]
		DW [ 302 224 310 ]
		DW [ 282 281 229 ]
		DW [ 282 229 228 ]
		DW [ 293 294 218 ]
		DW [ 293 218 219 ]
		DW [ 284 283 225 ]
		DW [ 284 225 224 ]
		DW [ 289 288 287 ]
		DW [ 289 287 304 ]
		DW [ 304 282 228 ]
		DW [ 304 228 311 ]
		DW [ 296 290 220 ]
		DW [ 296 220 309 ]
		DW [ 289 290 291 ]
		DW [ 289 291 288 ]
		DW [ 283 284 292 ]
		DW [ 283 292 286 ]
		DW [ 291 290 296 ]
		DW [ 291 296 297 ]
		DW [ 283 286 285 ]
		DW [ 283 285 295 ]
		DW [ 283 279 241 ]
		DW [ 283 241 225 ]
		DW [ 293 295 300 ]
		DW [ 293 300 298 ]
		DW [ 294 293 298 ]
		DW [ 294 298 299 ]
		DW [ 296 294 299 ]
		DW [ 296 299 301 ]
		DW [ 292 284 302 ]
		DW [ 292 302 305 ]
		DW [ 289 304 311 ]
		DW [ 289 311 221 ]
		DW [ 302 281 306 ]
		DW [ 302 306 303 ]
		DW [ 281 282 307 ]
		DW [ 281 307 306 ]
		DW [ 282 304 308 ]
		DW [ 282 308 307 ]
		DW [ 224 260 229 ]
		DW [ 224 229 310 ]
		DW [ 220 240 218 ]
		DW [ 220 218 309 ]
		DW [ 218 240 280 ]
		DW [ 218 280 320 ]
		DW [ 224 225 316 ]
		DW [ 224 316 314 ]
		DW [ 228 229 318 ]
		DW [ 228 318 317 ]
		DW [ 240 220 278 ]
		DW [ 240 278 280 ]
		DW [ 259 221 311 ]
		DW [ 259 311 228 ]
		DW [ 290 289 221 ]
		DW [ 290 221 220 ]
		DW [ 279 293 219 ]
		DW [ 279 219 241 ]
		DW [ 294 296 309 ]
		DW [ 294 309 218 ]
		DW [ 281 302 310 ]
		DW [ 281 310 229 ]
		DW [ 280 277 313 ]
		DW [ 280 313 315 ]
		DW [ 315 313 314 ]
		DW [ 315 314 316 ]
		DW [ 277 280 278 ]
		DW [ 277 278 312 ]
		DW [ 313 277 317 ]
		DW [ 313 317 318 ]
		DW [ 280 315 319 ]
		DW [ 280 319 320 ]
		DW [ 229 260 313 ]
		DW [ 229 313 318 ]
		DW [ 220 221 312 ]
		DW [ 220 312 278 ]
		DW [ 219 218 320 ]
		DW [ 219 320 319 ]
		DW [ 259 228 317 ]
		DW [ 259 317 277 ]
		DW [ 241 219 319 ]
		DW [ 241 319 315 ]
		DW [ 225 241 315 ]
		DW [ 225 315 316 ]
		DW [ 260 224 314 ]
		DW [ 260 314 313 ]
		DW [ 321 322 323 ]
		DW [ 321 323 285 ]
		DW [ 253 300 323 ]
		DW [ 253 323 322 ]
		DW [ 300 295 285 ]
		DW [ 300 285 323 ]
		DW [ 216 329 330 ]
		DW [ 216 330 217 ]
		DW [ 217 330 327 ]
		DW [ 217 327 214 ]
		DW [ 215 328 329 ]
		DW [ 215 329 216 ]
		DW [ 330 329 324 ]
		DW [ 330 324 279 ]
		DW [ 327 330 279 ]
		DW [ 327 279 326 ]
		DW [ 328 327 326 ]
		DW [ 328 326 325 ]
		DW [ 329 328 325 ]
		DW [ 329 325 324 ]
		DW [ 214 327 328 ]
		DW [ 214 328 215 ]
		DW [ 324 325 326 ]
		DW [ 324 326 279 ]
	.minecraftTriUVs //t1, t2, t3
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 4 5 6 ]
		DW [ 4 6 7 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 7 4 5 ]
		DW [ 7 5 6 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 8 9 10 ]
		DW [ 8 10 11 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 0 1 2 ]
		DW [ 0 2 3 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 11 8 9 ]
		DW [ 11 9 10 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 19 16 17 ]
		DW [ 19 17 18 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 16 17 18 ]
		DW [ 16 18 19 ]
		DW [ 17 18 19 ]
		DW [ 17 19 16 ]
		DW [ 18 19 16 ]
		DW [ 18 16 17 ]
		DW [ 13 14 15 ]
		DW [ 13 15 12 ]
		DW [ 13 14 15 ]
		DW [ 13 15 12 ]
		DW [ 13 14 15 ]
		DW [ 13 15 12 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
		DW [ 13 14 15 ]
		DW [ 13 15 12 ]
		DW [ 12 13 14 ]
		DW [ 12 14 15 ]
	//end tris
	//texture
		DW [ 40 8 ] //width, height
	.minecraftTexture
		DW [ 62866 62578 62594 62578 62866 62578 62866 62594 64389 63315 63844 64389 63315 64389 63844 63844 62594 62883 62594 62322 62322 62578 62306 62578 63315 63315 62514 63315 63315 63315 62241 63315 61760 61760 61504 61793 0 0 62065 61760 ]
		DW [ 62866 62770 62866 62578 62867 62866 62866 62770 63315 63844 62770 63315 63315 63844 63624 62770 62594 62578 62594 62594 62594 62322 62594 62322 63315 62514 62786 62786 63315 62241 63860 62786 0 61793 61760 61793 0 62065 61793 62065 ]
		DW [ 62770 63315 62770 62770 62866 62770 62770 62770 64389 63315 63315 62770 64389 63315 63315 63315 62594 62578 62305 62322 62322 62322 62578 62578 63315 62241 62786 62786 63315 62241 63860 62786 62065 0 61793 0 0 62065 62065 62065 ]
		DW [ 63315 63078 63315 63315 62770 64389 63315 64389 63315 63078 64389 63315 63844 62770 63315 64389 62305 62322 62578 62594 62578 62594 62305 62594 63860 62241 63315 62786 63315 62514 63315 62786 62065 61504 0 0 0 0 62065 0 ]
		DW [ 63844 63315 63844 64389 63315 63844 63315 63315 63844 63315 63844 64389 62770 63844 63315 63844 62594 62322 62866 62322 62866 62866 62322 62866 63860 62514 63315 62786 63315 62241 63315 62786 0 0 0 61504 61793 61793 0 0 ]
		DW [ 63315 64389 63844 63844 63315 63844 64389 62770 63315 62770 63844 63844 63315 63844 62770 62770 62594 62594 62305 62610 62322 62594 62594 62594 63860 63315 62514 63315 63860 62514 63315 62786 61504 61504 0 0 61504 61760 61793 0 ]
		DW [ 64389 63844 62770 63315 63624 63315 63315 64389 64389 63315 63315 63315 63624 63315 63315 64389 62305 62594 62610 62578 62594 62322 62578 62306 62786 63315 62514 63315 63860 62786 62514 63315 0 61760 61760 0 61793 61793 61760 62065 ]
		DW [ 63315 63315 64389 64389 63844 63844 63315 63315 63315 63315 64389 64389 63844 63844 63315 63315 62578 62322 62594 62578 62578 62305 62594 62322 62786 63315 62241 63315 63860 63315 62514 63860 61504 61504 61760 61793 0 62065 61760 61793 ]
	//end texture
	//The following lines could not be translated from the source .obj file:
		// # Blender v2.92.0 OBJ File: 'minecraft.blend'
		// # www.blender.org
		// o Cube
		// s off
		// 
//end minecraft
//^ ^ paste mesh data here ^ ^


//active vertices
    .activeTriV1 //screenX, screenY, screenZ, textureU, textureV, worldX, worldY, worldZ, normalX, normalY, normalZ
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .activeTriV2
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .activeTriV3
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .activeTriV4
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .scanlineStart
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .scanlineEnd
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    .activePixel
        DW [ 0 0 0  0 0  0 0 0  0 0 0 ]
    @define sx 0
    @define sy 1
    @define sz 2
    @define tu 3
    @define tv 4
    @define wx 5
    @define wy 6
    @define wz 7
    @define nx 8
    @define ny 9
    @define nz 10
//end active vertices
    .depthBuffer
        DW [ 0 ] // plus the rest of the heap

//global regs
@define frame r1
@define triIndex r2

//temporary regs
@define gen1 r15
@define gen2 r14
@define var1 r13
@define var2 r12
@define addr r11
@define temp r10

out %buffer 2
.loop

    imm gen1 0
    in var1 %x
    in var2 %y
    mlt gen2 var1 var2
    .DBLoop
        lstr .depthBuffer gen1 @max
        inc gen1 gen1
    brl .DBLoop gen1 gen2

    out %buffer 1

    cal .drawMesh

    llod var1 .camPos 2
    inc var1 var1
    lstr .camPos 2 var1

    out %buffer 0
//jmp .loop

hlt

.drawMesh
    imm triIndex 0
    .triLoop
        llod var1 meshAddr 3
        llod var1 var1 -1
        bge .endTriLoop triIndex var1

        //get world position of vertices
        mlt gen1 triIndex 3
        llod var1 meshAddr 3 //triVertices list address
        llod var2 var1 gen1 //triangle vertex 1 index
        mlt var2 var2 3
        llod gen2 meshAddr 0 //vertices list address
        add var2 var2 gen2 //triangle vertex 1 address

        llod gen2 var2 0 //vertex world X
        lstr .activeTriV1 wx gen2
        llod gen2 var2 1 //vertex world y
        lstr .activeTriV1 wy gen2
        llod gen2 var2 2 //vertex world z
        lstr .activeTriV1 wz gen2

        inc var1 var1
        llod var2 var1 gen1 //triangle vertex 2 index
        mlt var2 var2 3
        llod gen2 meshAddr 0
        add var2 var2 gen2

        llod gen2 var2 0 //vertex world X
        lstr .activeTriV2 wx gen2
        llod gen2 var2 1 //vertex world y
        lstr .activeTriV2 wy gen2
        llod gen2 var2 2 //vertex world z
        lstr .activeTriV2 wz gen2

        inc var1 var1
        llod var2 var1 gen1 //triangle vertex 3 index
        mlt var2 var2 3
        llod gen2 meshAddr 0
        add var2 var2 gen2

        llod gen2 var2 0 //vertex world X
        lstr .activeTriV3 wx gen2
        llod gen2 var2 1 //vertex world y
        lstr .activeTriV3 wy gen2
        llod gen2 var2 2 //vertex world z
        lstr .activeTriV3 wz gen2

        llod var1 meshAddr 1
        brz .endGetUVs var1
            //get uvs of vertices
            mlt gen1 triIndex 3
            llod var1 meshAddr 4 //triUVs list address
            llod var2 var1 gen1 //triangle UV 1 index
            mlt var2 var2 2
            llod gen2 meshAddr 1 //UVs list address
            add var2 var2 gen2 //triangle UV 1 address

            llod gen2 var2 0 //vertex u
            lstr .activeTriV1 tu gen2
            llod gen2 var2 1 //vertex v
            lstr .activeTriV1 tv gen2

            inc var1 var1
            llod var2 var1 gen1 //triangle UV 2 index
            mlt var2 var2 2
            llod gen2 meshAddr 1
            add var2 var2 gen2

            llod gen2 var2 0 //vertex u
            lstr .activeTriV2 tu gen2
            llod gen2 var2 1 //vertex v
            lstr .activeTriV2 tv gen2

            inc var1 var1
            llod var2 var1 gen1 //triangle UV 3 index
            mlt var2 var2 2
            llod gen2 meshAddr 1
            add var2 var2 gen2

            llod gen2 var2 0 //vertex u
            lstr .activeTriV3 tu gen2
            llod gen2 var2 1 //vertex v
            lstr .activeTriV3 tv gen2
        .endGetUVs

        llod var1 meshAddr 2
        brz .endGetNormals var1
            //get normals of vertices
            mlt gen1 triIndex 3
            llod var1 meshAddr 5 //triNormalss list address
            llod var2 var1 gen1 //triangle normal 1 index
            mlt var2 var2 3
            llod gen2 meshAddr 2 //normals list address
            add var2 var2 gen2 //triangle normal 1 address

            llod gen2 var2 0 //vertex normal x
            lstr .activeTriV1 nx gen2
            llod gen2 var2 1 //vertex normal y
            lstr .activeTriV1 ny gen2
            llod gen2 var2 2 //vertex normal z
            lstr .activeTriV1 nz gen2

            inc var1 var1
            llod var2 var1 gen1 //triangle normal 2 index
            mlt var2 var2 3
            llod gen2 meshAddr 2
            add var2 var2 gen2 //triangle normal 2 address

            llod gen2 var2 0 //vertex normal x
            lstr .activeTriV2 nx gen2
            llod gen2 var2 1 //vertex normal y
            lstr .activeTriV2 ny gen2
            llod gen2 var2 2 //vertex normal z
            lstr .activeTriV2 nz gen2

            inc var1 var1
            llod var2 var1 gen1 //triangle normal 3 index
            mlt var2 var2 3
            llod gen2 meshAddr 2
            add var2 var2 gen2 //triangle normal 3 address

            llod gen2 var2 0 //vertex normal x
            lstr .activeTriV3 nx gen2
            llod gen2 var2 1 //vertex normal y
            lstr .activeTriV3 ny gen2
            llod gen2 var2 2 //vertex normal z
            lstr .activeTriV3 nz gen2
        .endGetNormals

        imm addr .activeTriV1
        cal .toScreenSpace
        bnz .triLoopNext clip

        imm addr .activeTriV2
        cal .toScreenSpace
        bnz .triLoopNext clip

        imm addr .activeTriV3
        cal .toScreenSpace
        bnz .triLoopNext clip

		//backface culling
			//find cross product
				llod var1 .activeTriV1 sx
				llod var2 .activeTriV3 sx
				sub gen1 var1 var2
				llod var1 .activeTriV2 sy
				llod var2 .activeTriV3 sy
				sub gen2 var1 var2
				mlt gen1 gen1 gen2
				psh gen1
				llod var1 .activeTriV1 sy
				sub gen1 var1 var2
				llod var1 .activeTriV2 sx
				llod var2 .activeTriV3 sx
				sub gen2 var1 var2
				mlt gen2 gen1 gen2
				pop gen1
				sub gen1 gen1 gen2
			//cull
				brn .triLoopNext gen1
		//end backface culling

        //draw the triangle
        psh triIndex
        psh frame
        cal .drawTriangle
        pop frame
        pop triIndex
        
        .triLoopNext
            inc triIndex triIndex
            jmp .triLoop
    .endTriLoop
ret



//toScreenSpace function
    //description:
        //takes the address of a vertex and converts that vertex into screen space
    //inputs:
        @define activeVertex addr //the address of the vertex to convert to screen space
    //returns:
        //modifies the values stored in the activeVertex memory location
        @define clip r3 //returns 0 if vertice is not clipped and 1 if it is.
    //also uses:
        @define wspX r3 //world space point X
        @define wspY r4 //world space point Y
        @define wspZ r5 //world space point Z
.toScreenSpace
    //set origin to camera
    llod var1 .camPos 0
    llod var2 activeVertex wx
    sub wspX var2 var1

    llod var1 .camPos 1
    llod var2 activeVertex wy
    sub wspY var2 var1

    llod var1 .camPos 2
    llod var2 activeVertex wz
    sub wspZ var2 var1

    //find cam space Z
    llod var1 .camRotation 6
    mlt gen1 var1 wspX
    llod var1 .camRotation 7
    mlt gen2 var1 wspY
    add gen1 gen1 gen2
    llod var1 .camRotation 8
    mlt gen2 var1 wspZ
    add gen1 gen1 gen2

    //if cam space Z is negative or zero, clip.
    lod gen2 .camClipNear
    sbrl .toScreenSpaceClip gen1 gen2
    lod gen2 .camClipFar
    brg .toScreenSpaceClip gen1 gen2

        lstr activeVertex sz gen1

        //find cam space X
        llod var1 .camRotation 0
        mlt gen1 var1 wspX
        llod var1 .camRotation 1
        mlt gen2 var1 wspY
        add gen1 gen1 gen2
        llod var1 .camRotation 2
        mlt gen2 var1 wspZ
        add gen1 gen1 gen2
        lstr activeVertex sx gen1

        //find cam space Y
        llod var1 .camRotation 3
        mlt gen1 var1 wspX
        llod var1 .camRotation 4
        mlt gen2 var1 wspY
        add gen1 gen1 gen2
        llod var1 .camRotation 5
        mlt gen2 var1 wspZ
        add gen1 gen1 gen2
        lstr activeVertex sy gen1

        //convert from cam space to screen coordinates
        lod var1 .camLens
        llod var2 activeVertex sz
        
        llod gen1 activeVertex sx

        xor gen2 gen1 var1
        mlt gen1 gen1 var1
        xor gen2 gen2 gen1
        brn .toScreenSpaceClip gen2 //if multiplication overflows/gets the sign wrong, clip.

        bnz ~2 orthographic
            sdiv gen1 gen1 var2
        in gen2 %x
        rsh gen2 gen2
        add gen1 gen1 gen2
        lstr activeVertex sx gen1

        llod gen1 activeVertex sy

        xor gen2 gen1 var1
        mlt gen1 gen1 var1
        xor gen2 gen2 gen1
        brn .toScreenSpaceClip gen2 //if multiplication overflows/gets the sign wrong, clip.

        bnz ~2 orthographic
            sdiv gen1 gen1 var2
        in gen2 %y
        rsh gen2 gen2
        sub gen1 gen2 gen1
        lstr activeVertex sy gen1

        imm clip 0 //TODO find a better clipping method.
    ret
    .toScreenSpaceClip
        out %text 'c'
        out %text 'l'
        out %text 'i'
        out %text 'p'
        out %text '\n'
        imm clip 1
    ret
//end toCamSpace


//drawTriangle function
    //description:
        //Draws a triangle from the screen space coordinates of its vertices 
    //inputs:
        //.activeTriV1 memory
        //.activeTriV2 memory
        //.activeTriV3 memory
    //returns:
        //none
    //also uses:
        @define v1 r3
        @define v2 r4
        @define v3 r5
        @define xI r6
        @define yI r7
        @define maxX r8
        //.activeTriV4 memory
.drawTriangle
    imm v1 .activeTriV1
    imm v2 .activeTriV2
    imm v3 .activeTriV3

    //sort vertices by ascending y position
    llod var1 v1 sy
    llod var2 v2 sy
    sble .sort1End var1 var2
        mov temp v1
        mov v1 v2
        mov v2 temp
    .sort1End

    llod var1 v2 sy
    llod var2 v3 sy
    sble .sort2End var1 var2
        mov temp v2
        mov v2 v3
        mov v3 temp

        llod var1 v1 sy
        llod var2 v2 sy
        sble .sort3End var1 var2
            mov temp v1
            mov v1 v2
            mov v2 temp
        .sort3End
    .sort2End


    //find edge cases
    llod var1 v1 sy
    llod var2 v2 sy
    bre .flatBottomTri var1 var2
    llod var1 v3 sy
    bre .flatTopTri var2 var1

    //draw the triangle normally

        psh r1
        psh r2
        psh r3
        psh r4
        psh r5

            mov gen1 v1
            mov gen2 v3

            imm r1 .activeTriV4 //dest
            mov r2 gen1 //start
            mov r3 gen2 //end
            llod var1 gen1 sy
			llod var2 v2 sy
            sub r4 var2 var1 //at
            llod var2 gen2 sy
            sub r5 var2 var1 //to

            cal .lerpVertex

        pop r5
        pop r4
        pop r3
        pop r2
        pop r1



        mov temp v3
        imm v3 .activeTriV4
        
        llod var1 v2 sx
        llod var2 v3 sx
        sble .sort4End var1 var2
            mov v3 v2
            imm v2 .activeTriV4
        .sort4End

        cal .drawFlatTopTri

        mov v1 v2
        mov v2 v3
        mov v3 temp

        cal .drawFlatBottomTri
    ret

    //handle edge cases
    .flatBottomTri
        llod var1 v2 sy
        llod var2 v3 sy
        bre .line var1 var2

        llod var1 v1 sx
        llod var2 v2 sx
        sble .sortBottomEnd var1 var2
            mov gen1 v1
            mov v1 v2
            mov v2 gen1
        .sortBottomEnd

        cal .drawFlatBottomTri
    ret

    .flatTopTri
        llod var1 v2 sx
        llod var2 v3 sx
        sbrl .sortTopEnd var1 var2
            mov gen1 v2
            mov v2 v3
            mov v3 gen1
        .sortTopEnd
        
        cal .drawFlatTopTri
    ret

    .line //TODO don't ignore middle point
        llod var1 v1 sx
        llod var2 v2 sx
        sble .lineSort1 var1 var2
            mov temp v1
            mov v1 v2
            mov v2 temp
        .lineSort1
        llod var1 v2 sx
        llod var2 v3 sx
        sble .lineSort2 var1 var2
            mov temp v2
            mov v2 v3
            mov v3 temp

            llod var1 v1 sx
            llod var2 v2 sx
            sble .lineSort2 var1 var2
                mov temp v1
                mov v1 v2
                mov v2 temp
        .lineSort2

        llod xI v1 sx

        llod maxX v3 sx

        brn .endLine yI //if y is before the screen, don't draw
        brn .endLine maxX //if end x is before the screen, don't draw

        in var1 %x
        bge .endLine xI var1 //if the start x is past the screen, don't draw

        llod yI v1 sy
        in var1 %y
        bge .endLine yI var1 //if the y is past screen, don't draw

        ssetg gen1 xI 0
        and xI xI gen1 //if the start x is before the screen, set it to zero

        llod gen1 v1 sy
        out %y gen1
        .lineLoop
            psh r1
            psh r2
            psh r3
            psh r4
            psh r5

                mov gen1 v1
                mov gen2 v3

                imm r1 .activePixel //dest
                mov r2 gen2 //start
                mov r3 gen2 //end
                llod var1 gen2 sx
                sub r4 xI var1 //at
                llod var2 gen2 sx
                sub r5 var2 var1 //to

                cal .lerpVertex

            pop r5
            pop r4
            pop r3
            pop r2
            pop r1

            llod var1 .activePixel sz
            in gen2 %x
            mlt gen2 yI gen2
            add gen2 gen2 xI
            llod var2 .depthBuffer gen2

            bge .lineLoopNext var1 var2

				psh gen2

                llod addr meshAddr 6 //texture address
                llod var2 .activePixel tv
                llod var1 addr -1 //texture height
                mlt gen1 var2 var1
                div gen1 gen1 256 //texture row index

                llod var2 .activePixel tu
                llod var1 addr -2 //texture width
                mlt gen2 var2 var1
                div gen2 gen2 256 //texture column index

                mlt gen1 gen1 var1
                add gen1 gen1 gen2 //texture pixel index

                llod gen1 addr gen1

				pop var1

				//if pixel is transparent, don't draw.
				and gen2 gen1 @uqrt
				brz .lineLoopNext gen2

					out %x xI
					out %color gen1 //write to screen

					llod var2 .activePixel sz
					lstr .depthBuffer var1 var2 //write to depth buffer

            .lineLoopNext
                inc xI xI
        ble .lineLoop xI maxX

    .endLine
    ret

    //drawTriangle helper functions
        //drawFlatBottomTri function
            //description:
                //draws a (portion of a) triangle that's bottom side is flat
            //inputs:
                //v1 address of vertex 1 //must be sorted
                //v2 address of vertex 2
                //v3 address of vertex 3
            //returns:
                //none
            //also uses:
                //xI
                //yI
                @define maxY r9
                @define minDepth r1
                @define maxDepth r2
        .drawFlatBottomTri

            llod maxY v3 sy

            brn .endFBTri maxY //if end coord is before the screen, don't draw

            llod yI v1 sy

            in var1 %y
            sbge .endFBTri yI var1 //if start coord is after the screen, don't draw

            //clamp start and end coords to screen
            ssetg gen1 yI 0
            and yI yI gen1
            
            brl .FBTriMaxY maxY var1
                dec maxY var1
            .FBTriMaxY

            //loop through each Y coord in the triangle
            .FBTriYLoop

                //get scanline start coordinates
                psh r1
                psh r2
                psh r3
                psh r4
                psh r5

                    mov gen1 v1
                    mov gen2 v3

                    imm r1 .scanlineStart //dest
                    mov r2 gen1 //start
                    mov r3 gen2 //end
                    llod var1 gen1 sy
                    sub r4 yI var1 //at
                    llod var2 gen2 sy
                    sub r5 var2 var1 //to

                    cal .lerpVertex

                pop r5
                pop r4
                pop r3
                pop r2
                pop r1

                llod xI .scanlineStart sx
                in gen1 %x
                sbge .FBTriYLoopNext xI gen1 //if start x is past the screen, skip this line

                //get scanline end coordinates
                psh r1
                psh r2
                psh r3
                psh r4
                psh r5

                    mov gen1 v2
                    mov gen2 v3

                    imm r1 .scanlineEnd //dest
                    mov r2 gen1 //start
                    mov r3 gen2 //end
                    llod var1 gen1 sy
                    sub r4 yI var1 //at
                    llod var2 gen2 sy
                    sub r5 var2 var1 //to

                    cal .lerpVertex

                pop r5
                pop r4
                pop r3
                pop r2
                pop r1

                llod maxX .scanlineEnd sx
                brn .FBTriYLoopNext maxX //if end x is negative, skip this line

                //clamp start and end coords to screen
                ssetg gen1 xI 0
                and xI xI gen1

                in gen1 %x
                dec gen1 gen1
                ble .FBTriMaxX maxX gen1
                    mov maxX gen1
                .FBTriMaxX

                //draw the line
                out %y yI
                .FBTriXLoop

                    psh r1
                    psh r2
                    psh r3
                    psh r4
                    psh r5

                        imm r1 .activePixel //dest
                        imm r2 .scanlineStart //start
                        imm r3 .scanlineEnd //end
                        llod var1 .scanlineStart sx
                        sub r4 xI var1 //at
                        llod var2 .scanlineEnd sx
                        sub r5 var2 var1 //to

                        cal .lerpVertex

                    pop r5
                    pop r4
                    pop r3
                    pop r2
                    pop r1

                    llod var1 .activePixel sz
                    in gen2 %x
                    mlt gen2 yI gen2
                    add gen2 gen2 xI
                    llod var2 .depthBuffer gen2

                    bge .FBTriXLoopNext var1 var2 //check depth buffer

						psh gen2

                        llod addr meshAddr 6 //texture address
                        llod var2 .activePixel tv
                        llod var1 addr -1 //texture height
                        mlt gen1 var2 var1
                        div gen1 gen1 256 //texture row index

                        llod var2 .activePixel tu
                        llod var1 addr -2 //texture width
                        mlt gen2 var2 var1
                        div gen2 gen2 256 //texture column index

                        mlt gen1 gen1 var1
                        add gen1 gen1 gen2 //texture pixel index

                        llod gen1 addr gen1

						pop var1

						//if pixel is transparent don't draw
						and gen2 gen1 @uqrt
						brz .FBTriXLoopNext gen2

							out %x xI
							out %color gen1 //write to screen

							llod var2 .activePixel sz 
							lstr .depthBuffer var1 var2 //write to depth buffer
                    .FBTriXLoopNext
                        inc xI xI
                ble .FBTriXLoop xI maxX
                
                .FBTriYLoopNext
                    inc yI yI
            ble .FBTriYLoop yI maxY
        .endFBTri
        ret

        //description:
                //draws a (portion of a) triangle that's bottom side is flat
            //inputs:
                //v1 address of vertex 1 //must be sorted
                //v2 address of vertex 2
                //v3 address of vertex 3
            //returns:
                //none
            //also uses:
                //xI
                //yI
                //maxX
        .drawFlatTopTri

        	llod maxY v3 sy

            brn .endFTTri maxY //if end coord is before the screen, don't draw

            llod yI v1 sy

            in var1 %y
            sbge .endFTTri yI var1 //if start coord is after the screen, don't draw

            //clamp start and end coords to screen
            ssetg gen1 yI 0
            and yI yI gen1
            
            brl .FTTriMaxY maxY var1
                dec maxY var1
            .FTTriMaxY

            //loop through each Y coord in the triangle
            .FTTriYLoop
                //get scanline start vertex
                psh r1
                psh r2
                psh r3
                psh r4
                psh r5

                    mov gen1 v1
                    mov gen2 v2

                    imm r1 .scanlineStart //dest
                    mov r2 gen1 //start
                    mov r3 gen2 //end
                    llod var1 gen1 sy
                    sub r4 yI var1 //at
                    llod var2 gen2 sy
                    sub r5 var2 var1 //to

                    cal .lerpVertex

                pop r5
                pop r4
                pop r3
                pop r2
                pop r1

                llod xI .scanlineStart sx
                in var1 %x
                sbge .FTTriYLoopNext xI var1 //if the start x is past the screen, skip this scanline

                //get the scanline end vertex
                psh r1
                psh r2
                psh r3
                psh r4
                psh r5

                    mov gen1 v1
                    mov gen2 v3

                    imm r1 .scanlineEnd //dest
                    mov r2 gen1 //start
                    mov r3 gen2 //end
                    llod var1 gen1 sy
                    sub r4 yI var1 //at
                    llod var2 gen2 sy
                    sub r5 var2 var1 //to

                    cal .lerpVertex

                pop r5
                pop r4
                pop r3
                pop r2
                pop r1

                llod maxX .scanlineEnd sx
                brn .FTTriYLoopNext maxX //if end x is before the screen, skip this scanline

                //clamp start and end x to screen
                ssetg gen1 xI 0
                and xI xI gen1

                in gen1 %x
                dec gen1 gen1
                ble .FTTriMaxX maxX gen1
                    mov maxX gen1
                .FTTriMaxX

                //draw the scanline
                out %y yI
                .FTTriXLoop

                    psh r1
                    psh r2
                    psh r3
                    psh r4
                    psh r5

                        imm r1 .activePixel //dest
                        imm r2 .scanlineStart //start
                        imm r3 .scanlineEnd //end
                        llod var1 .scanlineStart sx
                        sub r4 xI var1 //at
                        llod var2 .scanlineEnd sx
                        sub r5 var2 var1 //to

                        cal .lerpVertex

                    pop r5
                    pop r4
                    pop r3
                    pop r2
                    pop r1

                    llod var1 .activePixel sz
                    in gen2 %x
                    mlt gen2 yI gen2
                    add gen2 gen2 xI
                    llod var2 .depthBuffer gen2

                    bge .FTTriXLoopNext var1 var2

						psh gen2

                        llod addr meshAddr 6 //texture address
                        llod var2 .activePixel tv
                        llod var1 addr -1 //texture height
                        mlt gen1 var2 var1
                        div gen1 gen1 256 //texture row index

                        llod var2 .activePixel tu
                        llod var1 addr -2 //texture width
                        mlt gen2 var2 var1
                        div gen2 gen2 256 //texture column index

                        mlt gen1 gen1 var1
                        add gen1 gen1 gen2 //texture pixel index

                        llod gen1 addr gen1

						pop var1

						and gen2 gen1 @uqrt
						brz .FTTriXLoopNext gen2

							out %x xI
							out %color gen1

							llod var2 .activePixel sz
							lstr .depthBuffer var1 var2
                    .FTTriXLoopNext
                    inc xI xI
                ble .FTTriXLoop xI maxX

                .FTTriYLoopNext
                    inc yI yI
            ble .FTTriYLoop yI maxY
        .endFTTri
        ret
    //end helper functions
//end drawTriangle function



//lerpVertex function
    //description
        //lerps all components between two vertices
    //inputs
        @define dest r1 //address to write the new vertex to
        @define start r2 //address of the vertex at the start of the lerp
        @define end r3 //address of the vertex at the end of the lerp
        @define at r4 //get the values at position at / to on the lerp
        @define to r5 //get the values at position at / to on the lerp
    //returns
        //modifies data at the dest address
    //also uses
        @define comp r6 //automatically restores
        @define numComps 11
        //var1
        //var2
        //gen1
.lerpVertex

    //pseudocode:
        //for each vertex component:
            //return ((B - A) * at) / to + A
    psh comp
    imm comp 0
    .lerpLoop
        llod var1 start comp
        llod var2 end comp
        sub gen1 var2 var1
        mlt gen1 gen1 at
        sdiv gen1 gen1 to
        add gen1 gen1 var1
        lstr dest comp gen1

        inc comp comp
    brl .lerpLoop comp numComps
    pop comp
    ret
//end .lerpVertex function

